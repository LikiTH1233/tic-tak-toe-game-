{"version":3,"sources":["server.js"],"names":["express","require","app","http","createServer","io","cors","origin","board","players","currentPlayer","room","map","a","b","b1","c","name","use","__dirname","on","socket","console","id","_ref","roomId","Math","floor","random","toString","symbol","score","Array","fill","join","emit","_ref2","rooms","length","player","push","to","p","_ref3","index","findIndex","playerIndex","playerSymbol","checkWinner","gameOverMsg","winnerSymbol","winner","find","concat","_ref4","message","otherPlayer","from","_ref6","accepted","_room$players","_slicedToArray","player2","player1","_i2","_Object$entries","Object","entries","_Object$entries$_i","removed","listen","PORT","log"],"mappings":"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","file":"server.min.js","sourcesContent":["const express = require(\"express\");\r\nconst app = express();\r\nconst http = require(\"http\").createServer(app);\r\nconst io = require(\"socket.io\")(http, {\r\n  cors: { origin: \"*\" } // allow connections from any domain\r\n});\r\n\r\n// Serve static files (index.html, style.css, script.js)\r\napp.use(express.static(__dirname));\r\n\r\n\r\nio.on(\"connection\", (socket) => {\r\n  console.log(\"New connection:\", socket.id);\r\n\r\n  socket.on(\"createRoom\", ({ name }) => {\r\n    const roomId = Math.floor(1000 + Math.random() * 9000).toString();\r\n    rooms[roomId] = { players:[{id:socket.id, name, symbol:\"X\", score:0}], board:Array(9).fill(null), currentPlayer:\"X\" };\r\n    socket.join(roomId);\r\n    socket.emit(\"roomCreated\", { roomId, symbol:\"X\" });\r\n  });\r\n\r\n  socket.on(\"joinRoom\", ({ name, roomId }) => {\r\n    const room = rooms[roomId];\r\n    if(!room) return socket.emit(\"errorMsg\",\"Room does not exist!\");\r\n    if(room.players.length >= 2) return socket.emit(\"errorMsg\",\"Room is full!\");\r\n    const player = {id:socket.id, name, symbol:\"O\", score:0};\r\n    room.players.push(player);\r\n    socket.join(roomId);\r\n    socket.emit(\"joinedRoom\",{roomId,symbol:\"O\"});\r\n    io.to(roomId).emit(\"startGame\",{ players:room.players.map(p=>({id:p.id,name:p.name,symbol:p.symbol,score:p.score})), board:room.board, currentPlayer:room.currentPlayer });\r\n  });\r\n\r\n  socket.on(\"makeMove\", ({ roomId, index }) => {\r\n    const room = rooms[roomId];\r\n    if(!room) return;\r\n    const playerIndex = room.players.findIndex(p => p.id===socket.id);\r\n    if(playerIndex===-1) return;\r\n    const playerSymbol = room.players[playerIndex].symbol;\r\n    if(room.board[index] || room.currentPlayer!==playerSymbol) return;\r\n\r\n    room.board[index] = playerSymbol;\r\n    room.currentPlayer = playerSymbol===\"X\"?\"O\":\"X\";\r\n\r\n    const winnerSymbol = checkWinner(room.board);\r\n    let gameOverMsg = null;\r\n    if(winnerSymbol){\r\n      const winner = room.players.find(p=>p.symbol===winnerSymbol);\r\n      winner.score++;\r\n      gameOverMsg = `${winner.name} (${winner.symbol}) wins!`;\r\n    } else if(!room.board.includes(null)){\r\n      gameOverMsg = \"It's a draw!\";\r\n    }\r\n\r\n    io.to(roomId).emit(\"updateBoard\",{ board:room.board, currentPlayer:room.currentPlayer, players:room.players.map(p=>({id:p.id,name:p.name,symbol:p.symbol,score:p.score})), gameOverMsg });\r\n  });\r\n\r\n  socket.on(\"restartGame\",(roomId)=>{\r\n    const room = rooms[roomId];\r\n    if(room){\r\n      room.board = Array(9).fill(null);\r\n      room.currentPlayer = \"X\";\r\n      io.to(roomId).emit(\"updateBoard\",{ board:room.board, currentPlayer:room.currentPlayer, players:room.players.map(p=>({id:p.id,name:p.name,symbol:p.symbol,score:p.score})), gameOverMsg:null });\r\n    }\r\n  });\r\n\r\n  socket.on(\"sendMessage\", ({ roomId, name, message }) => {\r\n    if(!roomId || !rooms[roomId]) return;\r\n    io.to(roomId).emit(\"receiveMessage\",{name,message});\r\n  });\r\n\r\n  socket.on(\"requestSwitch\", ({ roomId, name }) => {\r\n    const room = rooms[roomId];\r\n    if(!room) return;\r\n    const otherPlayer = room.players.find(p=>p.id!==socket.id);\r\n    if(otherPlayer){\r\n      io.to(otherPlayer.id).emit(\"switchRequest\",{from:name});\r\n    }\r\n  });\r\n\r\n  socket.on(\"switchResponse\", ({ roomId, accepted }) => {\r\n    const room = rooms[roomId];\r\n    if(!room) return;\r\n    const [player1, player2] = room.players;\r\n    if(accepted){\r\n      [player1.symbol, player2.symbol] = [player2.symbol, player1.symbol];\r\n      io.to(roomId).emit(\"switchUpdate\",{ message:\"Symbol switch accepted! Symbols updated.\", players:room.players });\r\n    } else {\r\n      io.to(roomId).emit(\"switchUpdate\",{ message:\"Symbol switch request denied!\", players:room.players });\r\n    }\r\n  });\r\n\r\n  socket.on(\"disconnect\", ()=>{\r\n    for(const [id, room] of Object.entries(rooms)){\r\n      const index = room.players.findIndex(p=>p.id===socket.id);\r\n      if(index!==-1){\r\n        const [removed] = room.players.splice(index,1);\r\n        io.to(id).emit(\"receiveMessage\",{name:\"System\", message:`${removed.name} left the room.`});\r\n        if(room.players.length===0) delete rooms[id];\r\n        break;\r\n      }\r\n    }\r\n  });\r\n});\r\n\r\nfunction checkWinner(b){\r\n  const wins=[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]];\r\n  for(const [a,b1,c] of wins){\r\n    if(b[a] && b[a]===b[b1] && b[a]===b[c]) return b[a];\r\n  }\r\n  return null;\r\n}\r\n\r\nhttp.listen(PORT, ()=>console.log(`Server running on port ${PORT}`));\r\n"]}