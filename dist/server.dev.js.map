{"version":3,"sources":["server.js"],"names":["express","require","app","http","createServer","io","cors","origin","use","__dirname","on","socket","console","log","id","name","roomId","Math","floor","random","toString","rooms","players","symbol","score","board","Array","fill","currentPlayer","join","emit","room","length","player","push","to","map","p","index","playerIndex","findIndex","playerSymbol","winnerSymbol","checkWinner","gameOverMsg","winner","find","includes","message","otherPlayer","from","accepted","player1","player2","Object","entries","splice","removed","b","wins","a","b1","c","listen","PORT"],"mappings":"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","sourcesContent":["const express = require(\"express\");\r\nconst app = express();\r\nconst http = require(\"http\").createServer(app);\r\nconst io = require(\"socket.io\")(http, {\r\n  cors: { origin: \"*\" } // allow connections from any domain\r\n});\r\n\r\n// Serve static files (index.html, style.css, script.js)\r\napp.use(express.static(__dirname));\r\n\r\n\r\nio.on(\"connection\", (socket) => {\r\n  console.log(\"New connection:\", socket.id);\r\n\r\n  socket.on(\"createRoom\", ({ name }) => {\r\n    const roomId = Math.floor(1000 + Math.random() * 9000).toString();\r\n    rooms[roomId] = { players:[{id:socket.id, name, symbol:\"X\", score:0}], board:Array(9).fill(null), currentPlayer:\"X\" };\r\n    socket.join(roomId);\r\n    socket.emit(\"roomCreated\", { roomId, symbol:\"X\" });\r\n  });\r\n\r\n  socket.on(\"joinRoom\", ({ name, roomId }) => {\r\n    const room = rooms[roomId];\r\n    if(!room) return socket.emit(\"errorMsg\",\"Room does not exist!\");\r\n    if(room.players.length >= 2) return socket.emit(\"errorMsg\",\"Room is full!\");\r\n    const player = {id:socket.id, name, symbol:\"O\", score:0};\r\n    room.players.push(player);\r\n    socket.join(roomId);\r\n    socket.emit(\"joinedRoom\",{roomId,symbol:\"O\"});\r\n    io.to(roomId).emit(\"startGame\",{ players:room.players.map(p=>({id:p.id,name:p.name,symbol:p.symbol,score:p.score})), board:room.board, currentPlayer:room.currentPlayer });\r\n  });\r\n\r\n  socket.on(\"makeMove\", ({ roomId, index }) => {\r\n    const room = rooms[roomId];\r\n    if(!room) return;\r\n    const playerIndex = room.players.findIndex(p => p.id===socket.id);\r\n    if(playerIndex===-1) return;\r\n    const playerSymbol = room.players[playerIndex].symbol;\r\n    if(room.board[index] || room.currentPlayer!==playerSymbol) return;\r\n\r\n    room.board[index] = playerSymbol;\r\n    room.currentPlayer = playerSymbol===\"X\"?\"O\":\"X\";\r\n\r\n    const winnerSymbol = checkWinner(room.board);\r\n    let gameOverMsg = null;\r\n    if(winnerSymbol){\r\n      const winner = room.players.find(p=>p.symbol===winnerSymbol);\r\n      winner.score++;\r\n      gameOverMsg = `${winner.name} (${winner.symbol}) wins!`;\r\n    } else if(!room.board.includes(null)){\r\n      gameOverMsg = \"It's a draw!\";\r\n    }\r\n\r\n    io.to(roomId).emit(\"updateBoard\",{ board:room.board, currentPlayer:room.currentPlayer, players:room.players.map(p=>({id:p.id,name:p.name,symbol:p.symbol,score:p.score})), gameOverMsg });\r\n  });\r\n\r\n  socket.on(\"restartGame\",(roomId)=>{\r\n    const room = rooms[roomId];\r\n    if(room){\r\n      room.board = Array(9).fill(null);\r\n      room.currentPlayer = \"X\";\r\n      io.to(roomId).emit(\"updateBoard\",{ board:room.board, currentPlayer:room.currentPlayer, players:room.players.map(p=>({id:p.id,name:p.name,symbol:p.symbol,score:p.score})), gameOverMsg:null });\r\n    }\r\n  });\r\n\r\n  socket.on(\"sendMessage\", ({ roomId, name, message }) => {\r\n    if(!roomId || !rooms[roomId]) return;\r\n    io.to(roomId).emit(\"receiveMessage\",{name,message});\r\n  });\r\n\r\n  socket.on(\"requestSwitch\", ({ roomId, name }) => {\r\n    const room = rooms[roomId];\r\n    if(!room) return;\r\n    const otherPlayer = room.players.find(p=>p.id!==socket.id);\r\n    if(otherPlayer){\r\n      io.to(otherPlayer.id).emit(\"switchRequest\",{from:name});\r\n    }\r\n  });\r\n\r\n  socket.on(\"switchResponse\", ({ roomId, accepted }) => {\r\n    const room = rooms[roomId];\r\n    if(!room) return;\r\n    const [player1, player2] = room.players;\r\n    if(accepted){\r\n      [player1.symbol, player2.symbol] = [player2.symbol, player1.symbol];\r\n      io.to(roomId).emit(\"switchUpdate\",{ message:\"Symbol switch accepted! Symbols updated.\", players:room.players });\r\n    } else {\r\n      io.to(roomId).emit(\"switchUpdate\",{ message:\"Symbol switch request denied!\", players:room.players });\r\n    }\r\n  });\r\n\r\n  socket.on(\"disconnect\", ()=>{\r\n    for(const [id, room] of Object.entries(rooms)){\r\n      const index = room.players.findIndex(p=>p.id===socket.id);\r\n      if(index!==-1){\r\n        const [removed] = room.players.splice(index,1);\r\n        io.to(id).emit(\"receiveMessage\",{name:\"System\", message:`${removed.name} left the room.`});\r\n        if(room.players.length===0) delete rooms[id];\r\n        break;\r\n      }\r\n    }\r\n  });\r\n});\r\n\r\nfunction checkWinner(b){\r\n  const wins=[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]];\r\n  for(const [a,b1,c] of wins){\r\n    if(b[a] && b[a]===b[b1] && b[a]===b[c]) return b[a];\r\n  }\r\n  return null;\r\n}\r\n\r\nhttp.listen(PORT, ()=>console.log(`Server running on port ${PORT}`));\r\n"],"file":"server.dev.js"}