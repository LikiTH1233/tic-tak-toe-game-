"use strict";function _slicedToArray(e,r){return _arrayWithHoles(e)||_iterableToArrayLimit(e,r)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}function _iterableToArrayLimit(e,r){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)){var o=[],n=!0,t=!1,a=void 0;try{for(var i,s=e[Symbol.iterator]();!(n=(i=s.next()).done)&&(o.push(i.value),!r||o.length!==r);n=!0);}catch(e){t=!0,a=e}finally{try{n||null==s.return||s.return()}finally{if(t)throw a}}return o}}function _arrayWithHoles(e){if(Array.isArray(e))return e}var express=require("express"),app=express(),http=require("http").createServer(app),io=require("socket.io")(http,{cors:{origin:"*"}});function checkWinner(e){for(var r=0,o=[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]];r<o.length;r++){var n=_slicedToArray(o[r],3),t=n[0],a=n[1],i=n[2];if(e[t]&&e[t]===e[a]&&e[t]===e[i])return e[t]}return null}app.use(express.static(__dirname)),io.on("connection",function(c){console.log("New connection:",c.id),c.on("createRoom",function(e){var r=e.name,o=Math.floor(1e3+9e3*Math.random()).toString();rooms[o]={players:[{id:c.id,name:r,symbol:"X",score:0}],board:Array(9).fill(null),currentPlayer:"X"},c.join(o),c.emit("roomCreated",{roomId:o,symbol:"X"})}),c.on("joinRoom",function(e){var r=e.name,o=e.roomId,n=rooms[o];if(!n)return c.emit("errorMsg","Room does not exist!");if(2<=n.players.length)return c.emit("errorMsg","Room is full!");var t={id:c.id,name:r,symbol:"O",score:0};n.players.push(t),c.join(o),c.emit("joinedRoom",{roomId:o,symbol:"O"}),io.to(o).emit("startGame",{players:n.players.map(function(e){return{id:e.id,name:e.name,symbol:e.symbol,score:e.score}}),board:n.board,currentPlayer:n.currentPlayer})}),c.on("makeMove",function(e){var r=e.roomId,o=e.index,n=rooms[r];if(n){var t=n.players.findIndex(function(e){return e.id===c.id});if(-1!==t){var a=n.players[t].symbol;if(!n.board[o]&&n.currentPlayer===a){n.board[o]=a,n.currentPlayer="X"===a?"O":"X";var i=checkWinner(n.board),s=null;if(i){var l=n.players.find(function(e){return e.symbol===i});l.score++,s="".concat(l.name," (").concat(l.symbol,") wins!")}else n.board.includes(null)||(s="It's a draw!");io.to(r).emit("updateBoard",{board:n.board,currentPlayer:n.currentPlayer,players:n.players.map(function(e){return{id:e.id,name:e.name,symbol:e.symbol,score:e.score}}),gameOverMsg:s})}}}}),c.on("restartGame",function(e){var r=rooms[e];r&&(r.board=Array(9).fill(null),r.currentPlayer="X",io.to(e).emit("updateBoard",{board:r.board,currentPlayer:r.currentPlayer,players:r.players.map(function(e){return{id:e.id,name:e.name,symbol:e.symbol,score:e.score}}),gameOverMsg:null}))}),c.on("sendMessage",function(e){var r=e.roomId,o=e.name,n=e.message;r&&rooms[r]&&io.to(r).emit("receiveMessage",{name:o,message:n})}),c.on("requestSwitch",function(e){var r=e.roomId,o=e.name,n=rooms[r];if(n){var t=n.players.find(function(e){return e.id!==c.id});t&&io.to(t.id).emit("switchRequest",{from:o})}}),c.on("switchResponse",function(e){var r=e.roomId,o=e.accepted,n=rooms[r];if(n){var t=_slicedToArray(n.players,2),a=t[0],i=t[1];if(o){var s=[i.symbol,a.symbol];a.symbol=s[0],i.symbol=s[1],io.to(r).emit("switchUpdate",{message:"Symbol switch accepted! Symbols updated.",players:n.players})}else io.to(r).emit("switchUpdate",{message:"Symbol switch request denied!",players:n.players})}}),c.on("disconnect",function(){for(var e=0,r=Object.entries(rooms);e<r.length;e++){var o=_slicedToArray(r[e],2),n=o[0],t=o[1],a=t.players.findIndex(function(e){return e.id===c.id});if(-1!==a){var i=_slicedToArray(t.players.splice(a,1),1)[0];io.to(n).emit("receiveMessage",{name:"System",message:"".concat(i.name," left the room.")}),0===t.players.length&&delete rooms[n];break}}})}),http.listen(PORT,function(){return console.log("Server running on port ".concat(PORT))});
//# sourceMappingURL=server.min.js.map
